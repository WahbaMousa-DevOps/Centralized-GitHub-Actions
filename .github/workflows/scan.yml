name: Reusable Security Scan

on:
  workflow_call:
    inputs:
      language:
        required: true
        type: string
    secrets:
      READ_PAT:
        required: true
      SLACK_SECURITY_BOT_TOKEN:
        required: true

jobs:
  scan:
    name: Secret & Static Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Essential for full history scans

  # Download centralized config from security repo
      - name: Fetch Centralized Security Config
        run: |
          curl -sSL \
            -H "Authorization: token ${{ secrets.READ_PAT }}" \
            -o gitleaks.toml \
            https://raw.githubusercontent.com/yourorg/security-repo/main/gitleaks.toml

      # ===== GITLEAKS SCAN =====
      - name: Run Gitleaks (with diagnostic logs)
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: ${{ github.workspace }}/gitleaks.toml
          report-format: json  # Machine-readable format
          verbose: true        # Enable detailed logging
          redact: false        # Keep full context for debugging
        env:
          GITLEAKS_LOG_LEVEL: debug  # Maximum verbosity
        continue-on-error: true

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          config-path: ${{ github.workspace }}/gitleaks.toml
          report-format: sarif  # Generate SARIF format
          report-path: gitleaks-report.sarif  # Output file

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: gitleaks-report.sarif
          # For monorepo support:
          category: "secrets/${{ inputs.language }}"
        continue-on-error: true

      # ===== GIT-SECRETS SCAN ===== 
      - name: Install git-secrets
        run: sudo apt-get install -y git-secrets

      - name: Configure git-secrets
        run: |
          git secrets --install -f
          git secrets --register-aws

      - name: Scan with git-secrets (capture logs)
        id: gitsecrets
        run: |
          # Capture full output with timestamps
          echo "Starting scan at $(date)" > gitsecrets.log
          git secrets --scan --no-index -r 2>&1 | tee -a gitsecrets.log
          echo "Exit code: $?" >> gitsecrets.log
        continue-on-error: true

      - name: Run Gitleaks with JSON Logging
        run: |
          gitleaks detect --config=${{ github.workspace }}/gitleaks.toml \
                          --report-format=json \
                          --report-path=gitleaks-report.json \
                          --verbose > gitleaks.log


      # ===== UNIVERSAL LOG CAPTURE =====
      - name: Package diagnostic artifacts
        if: always()  # CRITICAL: Runs even on failure
        run: |
          # Create timestamped directory
          TS=$(date +%Y%m%d_%H%M%S)
          mkdir -p diagnostics/$TS
          
          # Collect Gitleaks artifacts
          [ -f gitleaks-report.json ] && mv gitleaks-report.json diagnostics/$TS/
          [ -f gitleaks.log ] && mv gitleaks.log diagnostics/$TS/
          
          # Collect git-secrets log
          mv gitsecrets.log diagnostics/$TS/
          
          # System context
          echo "Workflow Context" > diagnostics/$TS/environment.txt
          echo "Job ID: ${{ github.job }}" >> diagnostics/$TS/environment.txt
          echo "Run ID: ${{ github.run_id }}" >> diagnostics/$TS/environment.txt
          echo "Event: ${{ github.event_name }}" >> diagnostics/$TS/environment.txt

      - name: Upload Diagnostic Bundle
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-diagnostics
          path: diagnostics/
          retention-days: 90

      # ===== INTELLIGENT FAILURE HANDLING =====
      - name: Evaluate Scan Results
        if: always()
        run: |
          # Check if either scan detected critical issues
          if [[ "${{ steps.gitleaks.outcome }}" == 'failure' ]] || \
             [[ "${{ steps.gitsecrets.outcome }}" == 'failure' ]]; then
             
            echo "::error::CRITICAL: Secrets detected! Review diagnostic artifacts"
            
            # Generate security alert (visible in Actions UI)
            echo "SECURITY_ALERT=true" >> $GITHUB_ENV
            
            # Optional: Send Slack/Teams alert
            # (Implement your notification logic here)
          else
            echo "::notice::Security scans passed successfully"
          fi

      - name: Enforce Security Gate
        if: ${{ env.SECURITY_ALERT == 'true' }}
        run: exit 1  # Hard fail after artifacts are captured

      - name: Alert Security Team
        if: ${{ env.SECURITY_ALERT == 'true' }}
        uses: archive/github-actions-slack@v2.1.0
        with:
          slack-bot-user-oauth-access-token: ${{ secrets.SLACK_SECURITY_BOT_TOKEN }}
          slack-channel: security-alerts
          slack-text: |
            :rotating_light: *SECRET DETECTED* in \`${{ github.repository }}\`
            *Branch*: ${{ github.ref }}
            *Commit*: \`${{ github.sha }}\`
            *Workflow*: ${{ github.workflow }}
            *Report*: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

      - name: Log Artifact Deletion Summary
        run: echo "Artifacts older than 90 days were removed from ${{ matrix.repo }} at $(date)"


  call-audit-log:
    needs: [scan]
    if: always()
    uses: WahbaMousa-DevOps/CENTRALIZED-GITHUB-ACTIONS/.github/workflows/audit.yml@main
    with:
      audit_message: "Scan completed: ${{ needs.scan.result }} | Diagnostics: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      job_name: "security-scan"